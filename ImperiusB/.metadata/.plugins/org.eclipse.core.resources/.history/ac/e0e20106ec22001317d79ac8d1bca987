package com.beta.thread;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

import android.util.Log;

import com.beta.Controllability.ControlValuePacket;
import com.beta.Controllability.IController;
import com.beta.MIDIUSBFunctinality.MIDIOutputDevice;


public class DeviceWriteThread extends Thread {
	final ReentrantLock deviceWriteLockObj_m = new ReentrantLock();
	private final Condition queueNotFullConditionObj_m = deviceWriteLockObj_m.newCondition();
	private boolean b_ThreadExit_m = false;
	private boolean b_IsToBeSuspended_m = false;
	private ControlValuePacket controlValuePacketObj_m;
	private MIDIOutputDevice midiOutputDeviceObj_m;
	private int functionValue_m = -1;
	private float f_Value_m = -1.0f;
	private static final String s_Tag_m = "DEVICE_WRITE_THREAD";
	@Override 
	public void run(){
		while ( !this.b_ThreadExit_m ){
			if ( this.getIsToBeSuspended() )
			{
				
				try {
					if (deviceWriteLockObj_m.isHeldByCurrentThread()){
						this.deviceWriteLockObj_m.unlock(); //If Thread is suspended, give up the Reentrant lock object					
						
					}
					Log.i(s_Tag_m, "DEVICE WRITE THREAD waiting");
					this.getQueueNotFullCondition().await();//AbstractActivity has to .signal() this object
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			else{
				if ( !this.deviceWriteLockObj_m.isHeldByCurrentThread()){
					deviceWriteLockObj_m.lock();
				}
				try{
					
					controlValuePacketObj_m = IController.queueObj_m.poll();
					Log.i(s_Tag_m, "Controller: " + controlValuePacketObj_m.getControllerType() + "Sub Controller: " + controlValuePacketObj_m.getSubControllerID());
					if ( controlValuePacketObj_m != null )
					{
						this.f_Value_m = this.controlValuePacketObj_m.getValueVector();
						Log.i(s_Tag_m, "Value: " + this.f_Value_m);
						//Get the appropriate value using the Mapper facility
						//Then get the right FunctionValue from the Mapper facility
						if ( this.midiOutputDeviceObj_m != null ){
							//midiOutputDeviceObj_m.fn_ControlChangeMessage(0, 0, functionValue_m, (int)f_Value_m);
							//Keep writing to the Device
						}
						
					}
				}
				finally{
					if (IController.queueObj_m.isEmpty()){
						this.deviceWriteLockObj_m.unlock();
					}
				}			
				
			}
			try {
				Thread.sleep(20);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	/**
	 * @return the b_ThreadExit_m
	 */
	public boolean getIsThreadExit() {
		return b_ThreadExit_m;
	}
	/**
	 * @param b_ThreadExit_m the b_ThreadExit_m to set
	 */
	public void setIsThreadExit(boolean b_ThreadExit_m) {
		this.b_ThreadExit_m = b_ThreadExit_m;
	}
	/**
	 * @return the midiOutputDeviceObj_m
	 */
	public MIDIOutputDevice getMidiOutputDevice() {
		return midiOutputDeviceObj_m;
	}
	/**
	 * @param midiOutputDeviceObj_m the midiOutputDeviceObj_m to set
	 */
	public void setMidiOutputDevice(MIDIOutputDevice midiOutputDeviceObj_m) {
		this.midiOutputDeviceObj_m = midiOutputDeviceObj_m;
	}
	/**
	 * @return the b_IsToBeSuspended_m
	 */
	public boolean getIsToBeSuspended() {
		return b_IsToBeSuspended_m;
	}
	/**
	 * @param b_IsToBeSuspended_m the b_IsToBeSuspended_m to set
	 */
	public void setIsToBeSuspended(boolean b_IsToBeSuspended_m) {
		this.b_IsToBeSuspended_m = b_IsToBeSuspended_m;
	}
	/**
	 * @return the queueNotFullConditionObj_m
	 */
	public Condition getQueueNotFullCondition() {
		return queueNotFullConditionObj_m;
	}

}
