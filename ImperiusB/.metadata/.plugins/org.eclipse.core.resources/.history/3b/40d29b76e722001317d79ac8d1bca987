package com.beta.imperius;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import android.app.Activity;
import android.app.Service;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;

import com.beta.MIDIUSBFunctinality.MIDIInputDevice;
import com.beta.MIDIUSBFunctinality.MIDIOutputDevice;
import com.beta.MIDIUSBFunctinality.UsbCommunication;
import com.beta.listener.OnMIDIDeviceAttachedListener;
import com.beta.listener.OnMIDIDeviceAttachedListenerImpl;
import com.beta.listener.OnMIDIDeviceDetachedListener;
import com.beta.listener.OnMIDIDeviceDetachedListenerImpl;
import com.beta.listener.OnMidiInputEventListener;
import com.beta.thread.DeviceWriteThread;
import com.beta.thread.IQueueWatcherListener;
import com.beta.thread.MIDIDeviceConnectionWatcher;
import com.beta.thread.QueueWatcherTimerTask;
import com.beta.usb.util.DeviceFilter;
import com.beta.util.UsbDeviceDetails;
import com.beta.util.UsbMIDIDeviceUtil;

public abstract class AbstractSingleMIDIActivity extends Activity implements
		OnMidiInputEventListener, OnMIDIDeviceAttachedListener,
		OnMIDIDeviceDetachedListener, IQueueWatcherListener {
	
	private UsbDevice usbDeviceObj_m;
	private UsbDeviceConnection usbDeviceConnectionObj_m;
	public MIDIInputDevice midiInputDeviceObj_m;
	public MIDIOutputDevice midiOutputDeviceObj_m;
	private OnMIDIDeviceAttachedListener midiDeviceAttachedListenerRef_m;
	private OnMIDIDeviceDetachedListener midiDeviceDetachedListenerRef_m;
	private Handler deviceDetachedHandlerObj_m;
	private MIDIDeviceConnectionWatcher midiDeviceConnectionWatcherObj_m;
	protected UsbManager usbManagerObj_m;
	private UsbCommunication usbCommunicationObj_m;
	protected UsbDeviceDetails usbMIDIDeviceDetails_m;
	private QueueWatcherTimerTask queueWatcherTimerTaskObj_m;
	private DeviceWriteThread deviceWriteThread_m;
	
	
	@Override
	protected void onCreate(final Bundle savedInstanceState){
		super.onCreate(savedInstanceState);
		
		//Fetch the USB Service from the application context;
		usbManagerObj_m = (UsbManager)this.getApplicationContext().getSystemService(Service.USB_SERVICE);
		List <DeviceFilter> deviceFilterList_f = null;
		
		try{
			deviceFilterList_f = DeviceFilter.getDeviceFilters(getApplicationContext());
			if ( deviceFilterList_f.size() == 0){
				Toast.makeText(this, "No device registered", Toast.LENGTH_LONG).show();
				
				
			}
		
		}
		catch ( IOException ex ){
			Log.e("AbstractSingleMIDIActivity", ex.getMessage());
		}
		if ( deviceFilterList_f == null )
			return;
		this.midiDeviceAttachedListenerRef_m = new OnMIDIDeviceAttachedListenerImpl(usbManagerObj_m, deviceFilterList_f, this );		
		this.deviceDetachedHandlerObj_m = new Handler(new Callback(){

			@Override
			public boolean handleMessage(Message message) {
				UsbDevice usbDevice_f  = (UsbDevice)message.obj;
				onDetachedDevice(usbDevice_f);
				return true;
			}
			
		});
		
		
		
		this.midiDeviceConnectionWatcherObj_m = new MIDIDeviceConnectionWatcher(
				this.getApplicationContext(), 
				this.midiDeviceAttachedListenerRef_m,
				this.midiDeviceDetachedListenerRef_m,
				usbManagerObj_m,
				this
				);

	}
	
	@Override
	public void onDetachedDevice(UsbDevice usbDevice){
		
	}
	
	@Override
	public void onDeviceAttached(UsbDevice usbDevice){		
		usbMIDIDeviceDetails_m = new UsbDeviceDetails();
		usbMIDIDeviceDetails_m.setProductID(String.valueOf(usbDevice.getProductId()));
		usbMIDIDeviceDetails_m.setVendorID(String.valueOf(usbDevice.getVendorId()));
		usbMIDIDeviceDetails_m.setDeviceClass(String.valueOf(usbDevice.getDeviceClass()));
		usbMIDIDeviceDetails_m.setSubClass(String.valueOf(usbDevice.getDeviceSubclass()));
		usbMIDIDeviceDetails_m.setProtocol(String.valueOf(usbDevice.getDeviceProtocol()));
		
		HashMap<String, String> rawDeviceDetails_f = UsbMIDIDeviceUtil.findRawDeviceDetails(usbDevice, usbManagerObj_m);
		if ( rawDeviceDetails_f != null){
			usbMIDIDeviceDetails_m.setManufacturer(rawDeviceDetails_f.get("Manufacturer"));
			usbMIDIDeviceDetails_m.setProduct(rawDeviceDetails_f.get("Product"));
		}
		//Start a queueWatcher Timer task to seek the queue state periodically
		queueWatcherTimerTaskObj_m = QueueWatcherTimerTask.fn_FetchTimerTaskInstance();
		queueWatcherTimerTaskObj_m.fn_StartTimerTask();
		
		this.deviceWriteThread_m = new DeviceWriteThread();
		this.deviceWriteThread_m.setMidiOutputDevice(midiOutputDeviceObj_m);
		this.deviceWriteThread_m.start();
	}
	
	@Override
	protected void onDestroy(){
		super.onDestroy();
		
		if ( midiDeviceConnectionWatcherObj_m != null ){
			midiDeviceConnectionWatcherObj_m.stop();
		}
		this.midiDeviceConnectionWatcherObj_m = null;
		if ( this.midiInputDeviceObj_m != null ){
			this.midiInputDeviceObj_m.stop();
			this.midiInputDeviceObj_m = null;
		}
		
		if ( this.midiOutputDeviceObj_m != null ){
			this.midiOutputDeviceObj_m.stop();
			this.midiOutputDeviceObj_m = null;
		}
		
		this.usbDeviceConnectionObj_m = null;
	}
	
	public void fn_RegisterOnDetachListener(UsbDevice usbDevice){		
		this.midiDeviceDetachedListenerRef_m = new OnMIDIDeviceDetachedListenerImpl(
				this.midiInputDeviceObj_m, 
				this.midiOutputDeviceObj_m, 
				this.midiInputDeviceObj_m.getUsbCommObj().getUsbDeviceConnection(),
				usbDevice, 
				this.deviceDetachedHandlerObj_m,
				this
				);
		midiDeviceConnectionWatcherObj_m.fn_SetOnDeviceDetachedListener(this.midiDeviceDetachedListenerRef_m);
		//this.midiDeviceConnectionWatcherObj_m.onMIDIDeviceDetachedListenerRef_m = midiDeviceDetachedListenerRef_m;
	}

	@Override
	public void onMIDIMiscellaneousFunctionCodes(MIDIInputDevice sender,
			int cable, int byte1, int byte2, int byte3) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMIDICableEvents(MIDIInputDevice sender, int cable, int byte1,
			int byte2, int byte3) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMIDICommonMessageEvents(MIDIInputDevice sender, int cable,
			byte[] bytes) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSystemExclusiveMessageEvent(MIDIInputDevice sender,
			int cable, byte[] sysExBytes) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onNoteOffEvent(MIDIInputDevice sender, int cable, int channel,
			int note, int velocity) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onNoteOnEvent(MIDIInputDevice sender, int cable, int channel,
			int note, int velocity) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPolyphonicAftertouchEvent(MIDIInputDevice sender, int cable,
			int channel, int note, int pressure) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onControlChange(MIDIInputDevice sender, int cable, int channel,
			int function, int value) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProgramChange(MIDIInputDevice sender, int cable, int channel,
			int function, int value) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onChannelPressureChangeEvent(MIDIInputDevice sender, int cable,
			int channel, int pressure) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPitchBendChange(MIDIInputDevice sender, int cable,
			int channel, int amount) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSingleByteEvent(MIDIInputDevice sender, int cable, byte byte_1) {
		// TODO Auto-generated method stub

	}
	
	/*Set of methods implemented as a IQueueWatcherListener 
	 *This will allow the abstract activity to know about current queue status and 
	 *command the write thread to work accordingly 
	 * (non-Javadoc)
	 * @see com.beta.thread.IQueueWatcherListener#fn_QueueIsNowEmpty()
	 */
	@Override
	public void fn_QueueIsNowEmpty(){
		
	}
	@Override
	public void fn_QueueIsNowFilling(){
		
	}
}
