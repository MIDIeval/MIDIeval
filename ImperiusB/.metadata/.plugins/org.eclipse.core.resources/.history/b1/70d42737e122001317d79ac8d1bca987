package com.beta.thread;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;


public class DeviceWriteThread extends Thread {
	final Lock deviceWriteLockObj_m = new ReentrantLock();
	final Condition queueNotFullConditionObj_m = deviceWriteLockObj_m.newCondition();
	private boolean b_ThreadExit_m = false;
	private boolean b_IsToBeSuspended_m = false;
	@Override 
	public void run(){
		while ( !this.b_ThreadExit_m ){
			if ( this.b_IsToBeSuspended_m )
			{
				try {
					this.queueNotFullConditionObj_m.await();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			else{
				//Write the ControlValuePacket to the USB port
			}
		}
		
	}
	/**
	 * @return the b_ThreadExit_m
	 */
	public boolean getIsThreadExit() {
		return b_ThreadExit_m;
	}
	/**
	 * @param b_ThreadExit_m the b_ThreadExit_m to set
	 */
	public void setIsThreadExit(boolean b_ThreadExit_m) {
		this.b_ThreadExit_m = b_ThreadExit_m;
	}

}
